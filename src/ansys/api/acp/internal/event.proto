// Copyright (C) 2022 - 2025 ANSYS, Inc. and/or its affiliates.
// SPDX-License-Identifier: MIT
//
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// NOTE:
// This is an internal proto definition and should not be
// used in any public interface.
// Stability and backwards compatibility is not guaranteed.

syntax = "proto3";
package ansys.api.acp.internal.event;

// The package name 'internal' has special meaning in Go:
// other modules cannot import it.
// To avoid this, we use 'unstable' instead of 'internal'.
// This only affects the generated Go code.
option go_package = "github.com/ansys/ansys-api-acp/ansys/api/acp/unstable/event";

import "ansys/api/acp/v0/base.proto";

enum EventType {
    INIT = 0; // signals the start of the stream
    CREATE = 1;
    PUT = 2;
    DELETE = 3;
}

message CreateEventData { v0.base.BasicInfo info = 1; }
message PutEventData { v0.base.BasicInfo info = 1; }
message DeleteEventData { string uuid = 1; }

message Event {
    EventType type = 1;
    oneof data {
        CreateEventData create = 2;
        PutEventData put = 3;
        DeleteEventData delete = 4;
    };
}

service EventService { rpc EventStream(v0.base.Empty) returns (stream Event); }
